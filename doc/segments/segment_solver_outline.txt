# ---------------------------------------------------------------------
#   Segment Evaluation
# ---------------------------------------------------------------------
MARC/Methods/Performance/evaluate_segment.py

The basic flow for mission evaluation is below.
One of the best ways to see this in action is to step through it
with a debugger, starting at evaluate_mission()

evaluate_mission()
    for each segment:
        evaluage_segment()
            unpack
            segment.initialize_differentials()
            segment.initalize_conditions()
            x_sol = root( segment_residuals() )
                unpack
                segment.update_differentials()
                segment.update_conditions()
                segment.solve_residuals()
            segment.post_process()
        end segment
    end for each segment
end mission!

some more detail on the inner workings is at the end of this document


# ---------------------------------------------------------------------
#   Base_Segment
# ---------------------------------------------------------------------
MARC/Attributes/Missions/Segments/Base_Segment.py

This is the base segment class, it sets up data dictionaries of
conditions, unknowns and residuals.  You can check these out in the
__defaults__() method.  The conditions data will be shared down into
the analysis modules, including aerodynamics and propulsion. Because
the conditions dictionary will be shared across modules, the naming is
verbose and explicit, which is why the names are so long.

Like always, the segments are discretized on control points in one
dimension, usually time.  All the control-point-wise data is stored in
2d arrays.  This allows for multiple columns for vector quantities,
and generalizes initialization out of the typical use case.

The evaluation script implements explicit passing of inputs into
segment's methods, to make it clear what is coming in and out.
Segment.self is always available if it's needed, but would be a
violation of style to use it without good reason.


# ---------------------------------------------------------------------
#   Aerodynamic Segment
# ---------------------------------------------------------------------
MARC/Attributes/Missions/Segments/Aerodynamic_Segment.py

This is an important segment class because it defines the conditions
data structure and implements many helper methods for the segments
we've been using.


# ---------------------------------------------------------------------
#   Starting a New Segment
# ---------------------------------------------------------------------
check out 
MARC/Attributes/Missions/Segments/Empty_Segment.py


# ---------------------------------------------------------------------
#   Top level mission evaluation
# ---------------------------------------------------------------------
MARC.Methods.Performance.evaluate_mission()
    for each segment:
        evaluage_segment()


# ---------------------------------------------------------------------
#   Segment evaluator
# ---------------------------------------------------------------------
MARC.Methods.Performance.evaluate_segment()
    
    #unpack 
    unknowns, residuals, conditions, numerics
    
    # works on a segment, see
    # MARC.Analyses.Mission.Segments.Segment()
    
    # initialize arrays in unknowns, residuals, conditions
    segment.initialize_differentials()    
    # arrays are defaulted to one-row 2D-arrays
    # this step expands them out to the segment's number of time points
    
    # initialize segment conditions
    segment.initalize_conditions()
    # this is likely the first function defined for a new segment
    # does all the pre-processing needed to run the segment
    
    # iterate and converge the segment residuals
    x_sol = root( segment_residuals() )
    
    # post process segments 
    segment.post_process()
    # does all the post-processing after a segment is run
    # this function fills in all the conditions that weren't needed
    # during the segment solve
    
    # done!


# ---------------------------------------------------------------------
#   Segment solver
# ---------------------------------------------------------------------
MARC.Methods.Performance.evaluate_segment.segment_residuals():
    # this function is called iteratively to converges residuals to zero
    
    # unpack 
    unknowns, residuals, conditions, numerics    
    
    # update differentials
    segment.update_differentials()
    # likely needed if the final time of the segment is changing
    
    # update conditions
    segment.update_conditions()
    # another important function for new segments
    # applies unknowns to the conditions
    # does the work to update conditions as a result
    
    # solve residuals
    segment.solve_residuals()
    # pulls conditions and processes them to solve for residuals
    # after this method, residuals composed into a final residual vector --
    #    R = [ [ d(unknowns.states)/dt - residuals.states   ] ;
    #          [                         residuals.controls ] ;
    #          [                         residuals.finals   ] ] = [0] ,
    #    where the segment solver will find a root of R = [0]
    
    
    
    
    
    
